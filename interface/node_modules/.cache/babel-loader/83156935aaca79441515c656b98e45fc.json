{"ast":null,"code":"import _slicedToArray from \"/Users/carsonbrown/Documents/Programming/Pin/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/carsonbrown/Documents/Programming/Pin/interface/src/components/uploadDialog.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  input: {\n    display: 'none'\n  }\n}));\nexport default function FormDialog() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        images = _React$useState4[0],\n        setImages = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        files = _React$useState6[0],\n        setFiles = _React$useState6[1];\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const uploadHandler = e => {\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      const img = new Image();\n      img.src = reader.result;\n      images = [...images];\n      images.push(img);\n      setImages(images);\n    };\n\n    e.target.files.map(f => {\n      const img = new Img();\n      img.source = f.result;\n    });\n    setImages(e.target.files);\n    console.log(e.target.files[0]);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: handleClickOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Upload Images\"), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Upload Image\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Upload some images to Pin them to the Map!\"), React.createElement(GridList, {\n    cellHeight: 160,\n    className: classes.gridList,\n    cols: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, tileData.map(tile => React.createElement(GridListTile, {\n    key: tile.img,\n    cols: tile.cols || 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: tile.img,\n    alt: tile.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    accept: \"image/*\",\n    className: classes.input,\n    id: \"text-button-file\",\n    multiple: true,\n    type: \"file\",\n    onChange: uploadHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"text-button-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    component: \"span\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Upload\")), React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Cancel\"))));\n}","map":{"version":3,"sources":["/Users/carsonbrown/Documents/Programming/Pin/interface/src/components/uploadDialog.js"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","makeStyles","useStyles","theme","root","margin","spacing","input","display","FormDialog","classes","useState","open","setOpen","images","setImages","files","setFiles","handleClickOpen","handleClose","uploadHandler","e","reader","FileReader","onload","img","Image","src","result","push","target","map","f","Img","source","console","log","gridList","tileData","tile","cols","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAACE,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJ,aAAS;AACPC,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADD;AADL,GAD+B;AAMrCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE;AADJ;AAN8B,CAAL,CAAN,CAA5B;AAWA,eAAe,SAASC,UAAT,GAAsB;AAEnC,QAAMC,OAAO,GAAGR,SAAS,EAAzB;;AAFmC,0BAIXT,KAAK,CAACkB,QAAN,CAAe,KAAf,CAJW;AAAA;AAAA,QAI5BC,IAJ4B;AAAA,QAItBC,OAJsB;;AAAA,2BAKPpB,KAAK,CAACkB,QAAN,CAAe,EAAf,CALO;AAAA;AAAA,QAK5BG,MAL4B;AAAA,QAKpBC,SALoB;;AAAA,2BAMTtB,KAAK,CAACkB,QAAN,CAAe,EAAf,CANS;AAAA;AAAA,QAM5BK,KAN4B;AAAA,QAMrBC,QANqB;;AAQnC,QAAMC,eAAe,GAAG,MAAM;AAC5BL,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMM,WAAW,GAAG,MAAM;AACxBN,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMO,aAAa,GAAIC,CAAD,IAAO;AAC3B,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpB,YAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUL,MAAM,CAACM,MAAjB;AAEAd,MAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,CAAT;AACAA,MAAAA,MAAM,CAACe,IAAP,CAAYJ,GAAZ;AACAV,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAPD;;AASAO,IAAAA,CAAC,CAACS,MAAF,CAASd,KAAT,CAAee,GAAf,CAAmBC,CAAC,IAAI;AACtB,YAAMP,GAAG,GAAG,IAAIQ,GAAJ,EAAZ;AACAR,MAAAA,GAAG,CAACS,MAAJ,GAAaF,CAAC,CAACJ,MAAf;AACD,KAHD;AAKAb,IAAAA,SAAS,CAACM,CAAC,CAACS,MAAF,CAASd,KAAV,CAAT;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYf,CAAC,CAACS,MAAF,CAASd,KAAT,CAAe,CAAf,CAAZ;AACD,GAnBD;;AAqBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,KAAK,EAAC,SAAjC;AAA2C,IAAA,OAAO,EAAEE,eAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEN,IAAd;AAAoB,IAAA,OAAO,EAAEO,WAA7B;AAA0C,uBAAgB,mBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADF,EAIE,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAE,GAAtB;AAA2B,IAAA,SAAS,EAAET,OAAO,CAAC2B,QAA9C;AAAwD,IAAA,IAAI,EAAE,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,QAAQ,CAACP,GAAT,CAAaQ,IAAI,IAChB,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,IAAI,CAACd,GAAxB;AAA6B,IAAA,IAAI,EAAEc,IAAI,CAACC,IAAL,IAAa,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAED,IAAI,CAACd,GAAf;AAAoB,IAAA,GAAG,EAAEc,IAAI,CAACE,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CADH,CAJF,CAFF,EAcE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA;AACI,IAAA,MAAM,EAAC,SADX;AAEI,IAAA,SAAS,EAAE/B,OAAO,CAACH,KAFvB;AAGI,IAAA,EAAE,EAAC,kBAHP;AAII,IAAA,QAAQ,MAJZ;AAKI,IAAA,IAAI,EAAC,MALT;AAMI,IAAA,QAAQ,EAAEa,aANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAUA;AAAO,IAAA,OAAO,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,SAAS,EAAC,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAVA,EAeE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,WAAjB;AAA8B,IAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,CAdF,CAJF,CADF;AAyCD","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: 'none',\n  },\n}));\n\nexport default function FormDialog() {\n\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [images, setImages] = React.useState([]);\n  const [files, setFiles] = React.useState([]);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const uploadHandler = (e) => {\n    const reader = new FileReader();\n    \n    reader.onload = () => {\n      const img = new Image()\n      img.src = reader.result\n\n      images = [...images]\n      images.push(img)\n      setImages(images)\n    }\n\n    e.target.files.map(f => {\n      const img = new Img()\n      img.source = f.result;\n    });\n\n    setImages(e.target.files);\n    console.log(e.target.files[0]);\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Upload Images\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Upload Image</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Upload some images to Pin them to the Map!\n          </DialogContentText>\n          <GridList cellHeight={160} className={classes.gridList} cols={3}>\n            {tileData.map(tile => (\n              <GridListTile key={tile.img} cols={tile.cols || 1}>\n                <img src={tile.img} alt={tile.title} />\n              </GridListTile>\n            ))}\n          </GridList>\n        </DialogContent>\n        <DialogActions>\n        \n        <input\n            accept=\"image/*\"\n            className={classes.input}\n            id=\"text-button-file\"\n            multiple\n            type=\"file\"\n            onChange={uploadHandler}\n        />\n        <label htmlFor=\"text-button-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                Upload\n            </Button>\n        </label>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}